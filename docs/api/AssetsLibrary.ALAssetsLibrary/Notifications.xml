<Documentation>
  <Docs DocId="M:AssetsLibrary.ALAssetsLibrary.Notifications.ObserveChanged(System.EventHandler{Foundation.NSNotificationEventArgs})">
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:AssetsLibrary.ALAssetsLibrary.ChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObservers(System.Collections.Generic.IEnumerable{Foundation.NSObject})" /></returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = ALAssetsLibrary.Notifications.ObserveChanged ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = ALAssetsLibrary.Notifications.ObserveChanged (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="M:AssetsLibrary.ALAssetsLibrary.Notifications.ObserveChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})">
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:AssetsLibrary.ALAssetsLibrary.ChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObservers(System.Collections.Generic.IEnumerable{Foundation.NSObject})" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:AssetsLibrary.ALAssetsLibrary.ChangedNotification" /> notifications.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Listen to all notifications posted for any object
var token = ALAssetsLibrary.Notifications.ObserveChanged ((notification) => {
	Console.WriteLine ("Observed ChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = ALAssetsLibrary.Notifications.ObserveChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed ChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="M:AssetsLibrary.ALAssetsLibrary.Notifications.ObserveChanged(System.EventHandler{AssetsLibrary.ALAssetLibraryChangedEventArgs})">
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:AssetsLibrary.ALAssetsLibrary.ChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObservers(System.Collections.Generic.IEnumerable{Foundation.NSObject})" /></returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = ALAssetsLibrary.Notifications.ObserveChanged ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("UpdatedAssets", args.UpdatedAssets);
    Console.WriteLine ("InsertedAssetGroups", args.InsertedAssetGroups);
    Console.WriteLine ("UpdatedAssetGroups", args.UpdatedAssetGroups);
    Console.WriteLine ("DeletedAssetGroupsKey", args.DeletedAssetGroupsKey);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, AssetsLibrary.ALAssetLibraryChangedEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("UpdatedAssets", args.UpdatedAssets);
    Console.WriteLine ("InsertedAssetGroups", args.InsertedAssetGroups);
    Console.WriteLine ("UpdatedAssetGroups", args.UpdatedAssetGroups);
    Console.WriteLine ("DeletedAssetGroupsKey", args.DeletedAssetGroupsKey);
}

void Setup ()
{
    notification = ALAssetsLibrary.Notifications.ObserveChanged (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="M:AssetsLibrary.ALAssetsLibrary.Notifications.ObserveChanged(Foundation.NSObject,System.EventHandler{AssetsLibrary.ALAssetLibraryChangedEventArgs})">
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:AssetsLibrary.ALAssetsLibrary.ChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObservers(System.Collections.Generic.IEnumerable{Foundation.NSObject})" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:AssetsLibrary.ALAssetsLibrary.ChangedNotification" /> notifications.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Listen to all notifications posted for any object
var token = ALAssetsLibrary.Notifications.ObserveChanged ((notification) => {
	Console.WriteLine ("Observed ChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = ALAssetsLibrary.Notifications.ObserveChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed ChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>