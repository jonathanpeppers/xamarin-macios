<Documentation>
  <Docs DocId="M:CoreFoundation.DispatchSource.SetRegistrationHandler(System.Action)">
        <param name="handler">Handler to invoke when the dispatch source has been registered and is ready to receive events.</param>
        <summary>Provides a registration handler</summary>
        <remarks>
          <para>When <see cref="M:CoreFoundation.DispatchSource.Resume" /> is called on a suspended or newly created source, there may be a brief delay before the source is ready to receive events from the underlying system handle. During this delay, the event handler will not be invoked, and events will be missed.</para>
          <para />
          <para>Once the dispatch source is registered with the underlying system and is ready to process all events its optional registration handler will be submitted to its target queue. This registration handler may be specified via <see cref="M:CoreFoundation.DispatchSource.SetRegistrationHandler(System.Action)" /></para>
          <para />
          <para>The event handler will not be called until the registration handler finishes. If the source is canceled (see below) before it is registered, its registration handler will not be called.</para>
          <para>
          </para>
        </remarks>
      </Docs>
  <Docs DocId="M:CoreFoundation.DispatchSource.Cancel">
        <summary>Asynchronously cancels the dispatch source.</summary>
        <remarks>
          <para>The <see cref="M:CoreFoundation.DispatchSource.Cancel" /> function asynchronously cancels the dispatch source, preventing any further invocation of its event handler block. Cancellation does not interrupt a currently executing handler block (non-preemptive). If a source is canceled before the first time it is resumed, its event handler will never be called.  (In this case, note that the source must be resumed before it can be released.)</para>
          <para>
          </para>
          <para>The <see cref="P:CoreFoundation.DispatchSource.IsCanceled" /> function may be used to determine whether the specified source has been canceled. </para>
          <para>
          </para>
          <para>When a dispatch source is canceled its optional cancellation handler will be submitted to its target queue. The cancellation handler may be specified via <see cref="M:CoreFoundation.DispatchSource.SetCancelHandler(System.Action)" />. This cancellation handler is invoked only once, and only as a direct consequence of calling <see cref="M:CoreFoundation.DispatchSource.Cancel" />.</para>
          <para>
          </para>
          <para>Important: a cancellation handler is required for file descriptor and mach port based sources in order to safely close the descriptor or destroy the port. Closing the descriptor or port before the cancellation handler has run may result in a race condition: if a new descriptor is allocated with the same value as the recently closed descriptor while the source's event handler is still running, the event handler may read/write data to the wrong descriptor.</para>
        </remarks>
      </Docs>
  <Docs DocId="M:CoreFoundation.DispatchSource.Dispose(System.Boolean)">
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose managed and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the DispatchSource object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the DispatchSource class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the DispatchSource ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
</Documentation>