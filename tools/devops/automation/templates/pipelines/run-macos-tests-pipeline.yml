# template to be extended by those pipelines that will run tests after a build.
parameters:

  - name: isPR
    displayName: State if the tests are ran for a PR build
    type: boolean
    default: false

  - name: repositoryAlias
    type: string
    default: self

  - name: commit
    type: string
    default: HEAD

  - name: stageDisplayNamePrefix
    type: string
    default: ''

  - name: macTestsConfigurations
    displayName: macOS test configurations to run
    type: object
    default: [
      {
        stageName: 'mac_12_m1',
        displayName: 'M1 - Mac Ventura (12)',
        macPool: 'VSEng-VSMac-Xamarin-Shared',
        useImage: false,
        statusContext: 'M1 - Mac Monterey (12)',
        demands: [
          "Agent.OS -equals Darwin",
          "macOS.Name -equals Monterey",
          "macOS.Architecture -equals arm64",
          "Agent.HasDevices -equals False",
          "Agent.IsPaired -equals False"
        ]
      },
      {
        stageName: 'mac_13_m1',
        displayName: 'M1 - Mac Ventura (13)',
        macPool: 'VSEng-VSMac-Xamarin-Shared',
        useImage: false,
        statusContext: 'M1 - Mac Ventura (13)',
        demands: [
          "Agent.OS -equals Darwin",
          "macOS.Name -equals Ventura",
          "macOS.Architecture -equals arm64",
          "Agent.HasDevices -equals False",
          "Agent.IsPaired -equals False"
        ]
      },
      {
        stageName: 'mac_14_x64',
        displayName: 'X64 - Mac Sonoma (14)',
        macPool: 'VSEng-Xamarin-RedmondMacBuildPool-iOS-Untrusted',
        useImage: false,
        statusContext: 'X64 - Mac Sonoma (14)',
        demands: [
          "Agent.OS -equals Darwin",
          "macOS.Name -equals Sonoma",
          "macOS.Architecture -equals x64",
          "Agent.HasDevices -equals False",
          "Agent.IsPaired -equals False"
        ]
      },
      {
        stageName: 'mac_15_arm64',
        displayName: 'arm64 - Mac Sequoia (15)',
        macPool: 'VSEng-VSMac-Xamarin-Shared',
        useImage: false,
        statusContext: 'arm64 - Mac Sequoia (15)',
        demands: [
          "Agent.OS -equals Darwin",
          "macOS.Name -equals Sequoia",
          "macOS.Architecture -equals arm64",
          "Agent.HasDevices -equals False",
          "Agent.IsPaired -equals False"
        ]
      }]

  - name: pool
    type: string
    default: automatic
    values:
      - pr
      - ci
      - automatic

resources:
  repositories:
    - repository: self
      checkoutOptions:
        submodules: true

    - repository: yaml-templates
      type: git
      name: xamarin.yaml-templates
      ref: refs/heads/main

    - repository: macios-adr
      type: git
      name: macios-adr
      ref: refs/heads/main

variables:
  - template: ../variables/common.yml
  - name: DisablePipelineConfigDetector
    value: true

stages:

  - stage: configure_build
    displayName: '${{ parameters.stageDisplayNamePrefix }}Configure'
    jobs:

      - ${{ if eq(parameters.pool, 'automatic') }}:
          - job: AgentPoolSelector       # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
            pool:                        # Consider using an agentless (server) job here, but would need to host selection logic as an Azure function: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#server
              vmImage: ubuntu-latest
            steps:
              - checkout: none             # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout

              # Selects appropriate agent pool based on trigger type (PR or CI); manually triggered builds target the PR pool
              - template: azure-devops-pools/agent-pool-selector.yml@yaml-templates
                parameters:
                  agentPoolPR: $(PRBuildPool)
                  agentPoolPRUrl: $(PRBuildPoolUrl)
                  agentPoolCI: $(CIBuildPool)
                  agentPoolCIUrl: $(CIBuildPoolUrl)

      - job: configure
        displayName: 'Configure build'
        pool:
          vmImage: windows-latest

        variables:
          isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
          isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]
          BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]

        steps:
          - template: ../common/load_configuration.yml
            parameters: 
              repositoryAlias: ${{ parameters.repositoryAlias }}
              commit: ${{ parameters.commit }}
              statusContext: 'VSTS: simulator tests' 
              uploadArtifacts: true
              use1ES: false

  - ${{ each config in parameters.macTestsConfigurations }}:
      - template: ../mac/stage.yml
        parameters:
          isPR: ${{ parameters.isPR }}
          repositoryAlias: ${{ parameters.repositoryAlias }}
          commit: ${{ parameters.commit }}
          stageName: ${{ config.stageName }}
          displayName: ' ${{ parameters.stageDisplayNamePrefix }}${{ config.displayName }}'
          macPool: ${{ config.macPool }}
          useImage: ${{ config.useImage }}
          statusContext: ${{ config.statusContext }}
          keyringPass: $(pass--lab--mac--builder--keychain)
          demands: ${{ config.demands }}
          postPipeline: true
          xqaCertPass: $(xqa--certificates--password)
