#!/bin/bash -e

function show_help () {
cat <<EOL
Usage: configure [options]
    -h, --help              Displays this help

    --enable-macos
    --disable-macos         Enable/disable building the macOS SDK.

    --enable-ios
    --disable-ios           Enable/disable building the iOS SDK.

    --enable-tvos
    --disable-tvos          Enable/disable building the tvOS SDK.

    --enable-maccatalyst
    --disable-maccatalyst   Enable/disable building the Mac Catalyst SDK.

    --disable-all-platforms Disable building all SDKs (typically followed by --enable-[iOS|tvOS|macOS|MacCatalyst] to only enable a single platform).

    --enable-ccache
    --disable-ccache        Enable/disable ccache. Default: enabled if detected.

    --enable-xamarin
    --disable-xamarin       Enable/disable additional Xamarin-specific parts of the build.

    --custom-dotnet=[artifacts] Use a locally built version of dotnet/runtime. See docs/CORECLR.md for detailed instructions about how to build dotnet/runtime from source.

    --ignore-unknown-params  alters the default behavior to not return an non-zero exit code when an unknown parameter is provided.
EOL
}

cd "$(dirname "${BASH_SOURCE[0]}")"
CONFIGURED_FILE=configure.inc
IGNORE_UNKNOWN_PARAMS=false
UNKNOWN_PARAMETERS=

rm -f $CONFIGURED_FILE

if test -z "$1"; then
    echo "configure: all default values assumed."
    exit 0
fi

echo "# Configure arguments: $*" >> $CONFIGURED_FILE

while test "x$1" != x; do
    case $1 in
    --disable-all-platforms)
        echo "INCLUDE_MAC=" >> $CONFIGURED_FILE
        echo "INCLUDE_IOS=" >> $CONFIGURED_FILE
        echo "INCLUDE_TVOS=" >> $CONFIGURED_FILE
        echo "INCLUDE_MACCATALYST=" >> $CONFIGURED_FILE
        echo "Disabled all platforms"
        shift
        ;;
    --disable-mac | --disable-macos)
        echo "INCLUDE_MAC=" >> $CONFIGURED_FILE
        echo "Mac Build disabled"
        shift
        ;;
    --enable-mac | --enable-macos)
        echo "INCLUDE_MAC=1" >> $CONFIGURED_FILE
        echo "Mac Build enabled"
        shift
        ;;
    --disable-ios)
        echo "INCLUDE_IOS=" >> $CONFIGURED_FILE
        echo "iOS Build disabled"
        shift
        ;;
    --enable-ios)
        echo "INCLUDE_IOS=1" >> $CONFIGURED_FILE
        echo "iOS Build enabled"
        shift
        ;;
    --disable-tvos)
        echo "INCLUDE_TVOS=" >> $CONFIGURED_FILE
        echo "tvOS Build disabled"
        shift
        ;;
    --enable-tvos)
        echo "INCLUDE_TVOS=1" >> $CONFIGURED_FILE
        echo "tvOS Build enabled"
        shift
        ;;
    --disable-maccatalyst)
        echo "INCLUDE_MACCATALYST=" >> $CONFIGURED_FILE
        echo "Mac Catalyst Build disabled"
        shift
        ;;
    --enable-maccatalyst)
        echo "INCLUDE_MACCATALYST=1" >> $CONFIGURED_FILE
        echo "Mac Catalyst Build enabled"
        shift
        ;;
    --disable-ccache)
        echo "ENABLE_CCACHE=" >> $CONFIGURED_FILE
        shift
        ;;
    --enable-ccache)
        if ! command -v ccache >/dev/null; then
            echo "Could not find ccache"
        else
            echo "ENABLE_CCACHE=1" >> $CONFIGURED_FILE
            echo "cache enabled"
        fi
        shift
        ;;
    --enable-xamarin)
        echo "ENABLE_XAMARIN=1" >> $CONFIGURED_FILE
        shift
        ;;
    --disable-xamarin)
        echo "ENABLE_XAMARIN=" >> $CONFIGURED_FILE
        shift
        ;;
    --custom-dotnet=*)
        echo "CUSTOM_DOTNET=1" >> "$CONFIGURED_FILE"
        echo "DOTNET_RUNTIME_PATH=${1:16}" >> "$CONFIGURED_FILE"
        shift
        ;;
    --custom-dotnet)
        echo "CUSTOM_DOTNET=1" >> "$CONFIGURED_FILE"
        echo "DOTNET_RUNTIME_PATH=$2" >> "$CONFIGURED_FILE"
        shift 2
        ;;
    --ignore-unknown-params)
        echo "ignoring unknown parameters"
        IGNORE_UNKNOWN_PARAMS=true
        shift
        ;;
    --help|-h)
        show_help
        exit 0
        ;;
    *)
        echo "Unknown configure argument $1" >&2
        UNKNOWN_PARAMETERS="$UNKNOWN_PARAMETERS $1"
        shift
        ;;
    esac
done

if [[ "$IGNORE_UNKNOWN_PARAMS" = false ]] && [[ -n "$UNKNOWN_PARAMETERS" ]]; then
    exit 1
fi

if [[ "$IGNORE_UNKNOWN_PARAMS" = true ]] && [[ -n "$UNKNOWN_PARAMETERS" ]]; then
    echo "The following parameters were ignored: $UNKNOWN_PARAMETERS"
fi

exit 0
